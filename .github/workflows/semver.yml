name: Semantic Versioning

on:
  push:
    branches:
      - trunk
    tags:
      - 'v*'
  pull_request:
    branches:
      - trunk
    branches-ignore:
      - main

env:
  # Configuration du versionnement sémantique
  MAJOR_LABELS: "breaking"
  MINOR_LABELS: "enhancement,feat"
  PATCH_LABELS: "bugfix,fix"
  DEFAULT_VERSION: "0.1.0"
  VERSION_FILE: "VERSION"

jobs:
  version:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Pour récupérer l'historique complet

    - name: Get Current Version
      id: version
      run: |
        # Si le fichier VERSION existe, on utilise sa version
        if [ -f ${{ env.VERSION_FILE }} ]; then
          echo "CURRENT_VERSION=$(cat ${{ env.VERSION_FILE }})" >> $GITHUB_OUTPUT
        else
          echo "CURRENT_VERSION=${{ env.DEFAULT_VERSION }}" >> $GITHUB_OUTPUT
        fi

    - name: Get Git Tags
      id: tags
      run: |
        echo "TAGS=$(git describe --tags --abbrev=0 2>/dev/null || echo '')" >> $GITHUB_OUTPUT

    - name: Get PR Labels
      id: labels
      run: |
        if [ -n "${{ github.event.pull_request }}" ]; then
          echo "LABELS=$(jq -r '.pull_request.labels[].name' <<< '${{ toJson(github.event) }}' | tr '\n' ',')" >> $GITHUB_OUTPUT
        else
          echo "LABELS=" >> $GITHUB_OUTPUT
        fi

    - name: Determine Next Version
      id: next_version
      run: |
        CURRENT_VERSION=${{ steps.version.outputs.CURRENT_VERSION }}
        TAGS=${{ steps.tags.outputs.TAGS }}
        LABELS=${{ steps.labels.outputs.LABELS }}
        
        # Si on a des tags, on utilise la dernière version
        if [ -n "$TAGS" ]; then
          CURRENT_VERSION=$TAGS
        fi
        
        # Par défaut, on fait une version PATCH
        TYPE="patch"
        
        # Si on a des labels, on détermine le type de version
        if [ -n "$LABELS" ]; then
          if echo "$LABELS" | grep -qE "(${{ env.MAJOR_LABELS }})"; then
            TYPE="major"
          elif echo "$LABELS" | grep -qE "(${{ env.MINOR_LABELS }})"; then
            TYPE="minor"
          fi
        fi
        
        # Extraire les numéros de version
        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
        
        # Calculer la nouvelle version
        case $TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT

    - name: Create Version File
      run: |
        echo "${{ steps.next_version.outputs.NEXT_VERSION }}" > ${{ env.VERSION_FILE }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.next_version.outputs.NEXT_VERSION }}
        release_name: Release v${{ steps.next_version.outputs.NEXT_VERSION }}
        body: |
          ## Changelog
          
          $(git log --pretty=format:'- %s (%h)' ${{ steps.tags.outputs.TAGS }}..HEAD)
        draft: false
        prerelease: false

    - name: Build
      run: |
        go build -o persona ./cmd

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: persona
        asset_name: persona
        asset_content_type: application/octet-stream
